devianza_fun <- function(x, y){
# esta función es una fábrica de funciones
devianza <- function(beta){
p <- feed_fow(beta, x)
- 2 * mean(y*log(p) + (1-y)*log(1-p))
}
devianza
}
dev <- devianza_fun(x.2,g.2)
dev(c(0,0,0,0,0,0,0,0,0,0,0,0,0))
set.seed(5)
salida <- optim(rnorm(13), dev, method = 'BFGS') # inicializar al azar punto inicial
salida
beta <- salida$par
beta
## hacer feed forward con beta encontrados
p_2 <- feed_fow(beta, x)
dat_2 <- data.frame(x, p_2 = p_2)
ggplot(dat_2, aes(x = x, y = p_2)) + geom_line()+
geom_line(data = dat.p, aes(x = x.2, y = p_2), col='red') +ylim(c(0,1))+
geom_point(data = datos, aes(x = x.2, y = g.2))
## hacer feed forward con beta encontrados
p_2 <- feed_fow(beta, x)
dat_2 <- data.frame(x, p_2 = p_2)
ggplot(dat_2, aes(x = x, y = p_2)) + geom_line() #+
#geom_line(data = dat.p, aes(x = x.2, y = p_2), col='red') +ylim(c(0,1))+
#   geom_point(data = datos, aes(x = x.2, y = g.2))
## hacer feed forward con beta encontrados
p_2 <- feed_fow(beta, x)
dat_2 <- data.frame(x, p_2 = p_2)
ggplot(dat_2, aes(x = x, y = p_2)) + geom_line() #+
geom_line(data = dat.p, aes(x = x, y = p), col='red') +ylim(c(0,1))+
geom_point(data = datos, aes(x = x.2, y = g.2))
## hacer feed forward con beta encontrados
p_2 <- feed_fow(beta, x)
dat_2 <- data.frame(x, p_2 = p_2)
ggplot(dat_2, aes(x = x, y = p_2)) + geom_line() #+
geom_line(data = datos, aes(x = x, y = p), col='red') +ylim(c(0,1))+
geom_point(data = datos, aes(x = x.2, y = g.2))
## hacer feed forward con beta encontrados
p_2 <- feed_fow(beta, x)
dat_2 <- data.frame(x, p_2 = p_2)
ggplot(dat_2, aes(x = x, y = p_2)) + geom_line() +
geom_line(data = dat.p, aes(x = x, y = p), col='red') +ylim(c(0,1))+
geom_point(data = datos, aes(x = x.2, y = g.2))
## hacer feed forward con beta encontrados
p_2 <- feed_fow(beta, x)
dat_2 <- data.frame(x, p_2 = p_2)
ggplot(dat_2, aes(x = x, y = p_2)) + geom_line() +
geom_line(data = dat.p, aes(x = x, y = p), col='red') +ylim(c(0,1))+
geom_jitter(data = datos, aes(x=x.2,y=g.2), col ='black',
position =position_jitter(height=0.05), alpha=0.4)
library(tidyverse)
h <- function(x){
exp(x)/(1 + exp(x))
}
x <- seq(-2,2,0.05)
p <- h(3 + x- 3 * x ^ 2 + 3 * cos(4 * x))
set.seed(100)
x.2 <- runif(300, -2, 2)
g.2 <- rbinom(300, 1, h(3 + x.2 - 3 * x.2 ^ 2 + 3 * cos(4 * x.2)))
datos <- data.frame(x.2,g.2)
dat.p <- data.frame(x,p)
g <- qplot(x,p, geom='line', col='red')
g + geom_jitter(data = datos, aes(x=x.2,y=g.2), col ='black',
position =position_jitter(height=0.05), alpha=0.4)
feed_fow <- function(beta, x){
a_1 <- h(beta[1] + beta[2] * x) # calcula variable 1 de capa oculta
a_2 <- h(beta[3] + beta[4] * x) # calcula variable 2 de capa oculta
a_3 <- h(beta[5] + beta[6] * x) # calcula variable 2 de capa oculta
a_4 <- h(beta[7] + beta[8] * x) # calcula variable 2 de capa oculta
p <- h(beta[9] + beta[10]*a_1 + beta[11]*a_2 + beta[12]*a_3 + beta[13]*a_4) # calcula capa de salida
p
}
devianza_fun <- function(x, y){
# esta función es una fábrica de funciones
devianza <- function(beta){
p <- feed_fow(beta, x)
- 2 * mean(y*log(p) + (1-y)*log(1-p))
}
devianza
}
dev <- devianza_fun(x.2,g.2)
dev(c(0,0,0,0,0,0,0,0,0,0,0,0,0))
set.seed(5)
salida <- optim(rnorm(13), dev, method = 'BFGS') # inicializar al azar punto inicial
salida
beta <- salida$par
beta
## hacer feed forward con beta encontrados
p_2 <- feed_fow(beta, x)
dat_2 <- data.frame(x, p_2 = p_2)
ggplot(dat_2, aes(x = x, y = p_2)) + geom_line() +
geom_line(data = dat.p, aes(x = x, y = p), col='red') +ylim(c(0,1))+
geom_jitter(data = datos, aes(x=x.2,y=g.2), col ='black',
position =position_jitter(height=0.05), alpha=0.4)
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
library(keras)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
library(keras)
boston_housing <- dataset_boston_housing()
knitr::opts_chunk$set(fig.width=5, fig.asp=0.7)
usar_cache = FALSE
library(igraph)
library(tidyverse)
gr <- graph(
c(c(1,4,1,5,1,6,2,4,2,5,2,6,3,4,3,5,3,6), c(4,7,5,7,6,7)))
plot(gr, layout = matrix(c(-4,1,-4,0,-4,-1,0,1,0,-1,0,0,4,0), byrow=T, ncol=2),
vertex.label=c('X1','X2','X3','a1','a2','a3','p1'),
vertex.size=50, vertex.color='salmon', vertex.label.cex=1,
vertex.label.color='white',vertex.frame.color=NA)
h <- function(x){
1/(1 + exp(-x)) # es lo mismo que exp(x)/(1 + exp(x))
}
x <- seq(-2, 2, 0.1)
p <- h(2 - 3 * x^2) #probabilidad condicional de clase 1 (vs. 0)
set.seed(2805721)
x_1 <- runif(30, -2, 2)
g_1 <- rbinom(30, 1, h(2 - 3 * x_1^2))
datos <- data.frame(x_1, g_1)
dat_p <- data.frame(x, p)
g <- qplot(x, p, geom='line', colour="red")
g + geom_point(data = datos, aes(x = x_1, y = g_1), colour = 'red')
gr <- graph(c(1,2,1,3,2,4,3,4))
plot(gr, layout = matrix(c(-2,0,0,1,0,-1,2,0), byrow=T, ncol=2),
vertex.label=c('X1','a_1','a_2','p1'),
vertex.size=50, vertex.color='salmon', vertex.label.cex=1.5,
vertex.label.color='white',vertex.frame.color=NA
)
a_1 <- h( 1 + 2*x)  # 2(x+1/2)
a_2 <- h(-1 + 2*x)  # 2(x-1/2) # una es una versión desplazada de otra.
dat_a <- data_frame(x = x, a_1 = a_1, a_2 = a_2)
dat_a_2 <- dat_a %>% gather(variable, valor, a_1:a_2)
ggplot(dat_a_2, aes(x=x, y=valor, colour=variable, group=variable)) + geom_line()
dat_a <- data.frame(x=x, a_1 = -4 + 12 * a_1, a_2 = -12 * a_2, suma = -4 + 12 * a_1 - 12 * a_2)
dat_a_2 <- dat_a %>% gather(variable, valor, a_1:suma)
ggplot(dat_a_2, aes(x = x, y = valor, colour = variable, group = variable)) + geom_line()
dat_2 <- data.frame(x, p2 = h(-4 + 12 * a_1 - 12 * a_2))
ggplot(dat_2, aes(x=x, y=p2)) + geom_line()+
geom_line(data=dat_p, aes(x=x,y=p), col='red') +ylim(c(0,1))+
geom_point(data = datos, aes(x = x_1, y = g_1))
## esta función calcula los valores de cada nodo en toda la red,
## para cada entrada
feed_fow <- function(beta, x){
a_1 <- h(beta[1] + beta[2] * x) # calcula variable 1 de capa oculta
a_2 <- h(beta[3] + beta[4] * x) # calcula variable 2 de capa oculta
p <- h(beta[5] + beta[6] * a_1 + beta[7] * a_2) # calcula capa de salida
p
}
devianza_fun <- function(x, y){
# esta función es una fábrica de funciones
devianza <- function(beta){
p <- feed_fow(beta, x)
- 2 * mean(y*log(p) + (1-y)*log(1-p))
}
devianza
}
dev <- devianza_fun(x_1, g_1) # crea función dev
## ahora dev toma solamente los 7 parámetros beta:
dev(c(0,0,0,0,0,0,0))
set.seed(5)
salida <- optim(rnorm(7), dev, method = 'BFGS') # inicializar al azar punto inicial
salida
beta <- salida$par
## hacer feed forward con beta encontrados
p_2 <- feed_fow(beta, x)
dat_2 <- data.frame(x, p_2 = p_2)
ggplot(dat_2, aes(x = x, y = p_2)) + geom_line()+
geom_line(data = dat_p, aes(x = x, y = p), col='red') +ylim(c(0,1))+
geom_point(data = datos, aes(x = x_1, y = g_1))
beta
devianza_reg <- function(x, y, lambda){
# esta función es una fábrica de funciones
devianza <- function(beta){
p <- feed_fow(beta, x)
# en esta regularizacion quitamos sesgos, pero puede hacerse también con sesgos.
- 2 * mean(y*log(p) + (1-y)*log(1-p)) + lambda*sum(beta[-c(1,3,5)]^2)
}
devianza
}
dev_r <- devianza_reg(x_1, g_1, 0.001) # crea función dev
set.seed(5)
salida <- optim(rnorm(7), dev_r, method='BFGS') # inicializar al azar punto inicial
salida
beta <- salida$par
dev(beta)
p_2 <- feed_fow(beta, x)
dat_2 <- data.frame(x, p_2 = p_2)
ggplot(dat_2, aes(x = x, y = p_2)) + geom_line()+
geom_line(data = dat_p, aes(x = x, y = p), col='red') +ylim(c(0,1))+
geom_point(data = datos, aes(x = x_1, y = g_1))
library(nnet)
set.seed(12)
nn <- nnet(g_1 ~ x_1, data = datos, size = 2, decay = 0.0, entropy = T)
nn$wts
nn$value
2*nn$value/30
dev(nn$wts)
qplot(x, predict(nn, newdata=data.frame(x_1 = x)), geom='line')
h <- function(x){
exp(x)/(1 + exp(x))
}
x <- seq(-2,2,0.05)
p <- h(3 + x- 3 * x ^ 2 + 3 * cos(4 * x))
set.seed(280572)
x.2 <- runif(300, -2, 2)
g.2 <- rbinom(300, 1, h(3 + x.2 - 3 * x.2 ^ 2 + 3 * cos(4 * x.2)))
datos <- data.frame(x.2,g.2)
dat.p <- data.frame(x,p)
g <- qplot(x,p, geom='line', col='red')
g + geom_jitter(data = datos, aes(x=x.2,y=g.2), col ='black',
position =position_jitter(height=0.05), alpha=0.4)
p <- function(x1, x2){
h(-5 + 10*x1 + 10*x2 - 30*x1*x2)
}
dat <- expand.grid(x1 = seq(0, 1, 0.05), x2 = seq(0, 1, 0.05))
dat <- dat %>% mutate(p = p(x1, x2))
ggplot(dat, aes(x=x1, y=x2)) + geom_tile(aes(fill=p))
set.seed(322)
n <- 500
dat_ent <- data_frame(x1=runif(n,0,1), x2 = runif(n, 0, 1)) %>%
mutate(p = p(x1, x2)) %>%
mutate(y = rbinom(n, 1, p))
mod_1 <- glm(y ~ x1 + x2, data = dat_ent, family = 'binomial')
mod_1
table(predict(mod_1) > 0.5, dat_ent$y)
mod_2 <- glm(y ~ x1 + x2 + x1:x2, data = dat_ent, family = 'binomial')
mod_2
table(predict(mod_2) > 0.5, dat_ent$y)
set.seed(11)
nn <- nnet(y ~ x1 + x2, data = dat_ent, size = 3, decay = 0.001,
entropy = T, maxit = 500)
#primera capa
matrix(round(nn$wts[1:9], 1), 3,3, byrow=T)
#segunda capa
round(nn$wts[10:13], 1)
#2*nn$value
feed_fow <- function(beta, x){
a_1 <- h(beta[1] + beta[2]*x[1] + beta[3]*x[2])
a_2 <- h(beta[4] + beta[5]*x[1] + beta[6]*x[2])
a_3 <- h(beta[7] + beta[8]*x[1] + beta[9]*x[2])
p <- h(beta[10]+beta[11]*a_1 + beta[12]*a_2 + beta[13]*a_3) # calcula capa de salida
p
}
feed_fow(nn$wts, c(0,0))
feed_fow(nn$wts, c(0,1))
feed_fow(nn$wts, c(1,0))
feed_fow(nn$wts, c(1,1))
dat <- dat %>% rowwise %>% mutate(p_red = feed_fow(nn$wts, c(x1, x2)))
ggplot(dat, aes(x=x1, y=x2)) + geom_tile(aes(fill=p_red))
dat_entrada <- data_frame(x_1 = c(0,0,1,1), x_2 = c(0,1,0,1))
a_1 <- dat_entrada %>% rowwise() %>% mutate(a_1 = h(sum(nn$wts[1:3] * c(1,x_1,x_2) )))
a_2 <- dat_entrada %>% rowwise() %>% mutate(a_2 = h(sum(nn$wts[4:6] * c(1,x_1,x_2) )))
a_3 <- dat_entrada %>% rowwise() %>% mutate(a_3 = h(sum(nn$wts[7:9] * c(1,x_1,x_2) )))
capa_intermedia <- left_join(a_1, a_2) %>% left_join(a_3)
a_1
a_3
a_2
nn$wts[10:13]
capa_final <- capa_intermedia %>% rowwise() %>%
mutate(p= h(sum(nn$wts[10:13]*c(1,a_1,a_2,a_3) ))) %>%
mutate(p=round(p,2))
capa_final
gr <- graph(
c(1,4,1,5,1,6,2,4,2,5,2,6,2,4,2,5,2,6,3,4,3,5,3,6,4,7,4,8,5,7,5,8,6,7,6,8,7,8,7,9,8,9))
plot(gr, layout=matrix(c(-1,1,-1,0,-1,-1,0,1,0,0,0,-1,1,0.5,1,-0.5,2,0), byrow=T,ncol=2),
vertex.label=c(expression(a[1]^{(1)}), expression(a[2]^{(1)}),expression(a[3]^{(1)}),
expression(a[1]^{(2)}),expression(a[2]^{(2)}),expression(a[3]^{(3)}),
expression(a[1]^{(3)}),expression(a[2]^{(3)}),                        expression(a[1]^{(4)})),
vertex.size=50, vertex.color=c('salmon'),
vertex.frame.color=NA, edge.curved=FALSE)
gr <- graph(
c(c(1,4,1,5,2,4,2,5,3,4,3,5)))
plot(gr, layout = matrix(c(-4,1,-4,0,-4,-1,0,1,0,-1), byrow=T, ncol=2),
vertex.label=c(expression(a[1]^2),expression(a[2]^2),expression(a[3]^2),
expression(a[1]^3), expression(a[2]^3)),
vertex.size=50, vertex.color=c('salmon','salmon','salmon','red','red'), vertex.label.cex=1.5,
vertex.label.color='white',vertex.frame.color=NA,
edge.label=c(expression(theta[11]^3),expression(theta[21]^2),
expression(theta[12]^2),  expression(theta[22]^2),
expression(theta[13]^2), expression(theta[23]^2)))
gr <- graph(
c(c(1,5,1,6,2,5,2,6,3,5,3,6,4,5,4,6)))
plot(gr, layout = matrix(c(-4,3,-4,1,-4,0,-4,-1,0,1,0,-1), byrow=T, ncol=2),
vertex.label=c(expression(a[0]^2), expression(a[1]^2),
expression(a[2]^2),expression(a[3]^2),
expression(a[1]^3), expression(a[2]^3)),
vertex.size=50,
vertex.color=c('gray','salmon','salmon','salmon','red','red'), vertex.label.cex=1.5,
vertex.label.color='white',vertex.frame.color=NA,
edge.label=c(expression(theta[10]^2),expression(theta[20]^2),
expression(theta[11]^2),expression(theta[21]^2), expression(theta[12]^2),  expression(theta[22]^2), expression(theta[13]^2), expression(theta[23]^2)))
gr <- graph(
c(c(1,4,1,5,2,4,2,5,3,4,3,5, 6, 4, 6, 5)))
plot(gr, layout = matrix(c(-4,1,-4,0,-4,-2,0,1,0,-1, -4, -1), byrow=T, ncol=2),
vertex.label=c('-2','5','1','a_1 ?','a_2 ?','3'), vertex.label.cex=1.5,
vertex.size=50, vertex.color=c('salmon','salmon','gray','red','red'), vertex.label.cex=2,
vertex.label.color='white',vertex.frame.color=NA,
edge.label=c(1.5,2,-1,0.5,3,1,-0.5,-0.2))
a_2 <- c(1, -2, 5, 3) # ponemos un 1 al principio para el sesgo
theta_2_1 = c(3, 1.5, -1.0, -0.5)
theta_2_2 = c(1, 2, 0.5, -0.2)
a_3 <- c(1, h(sum(theta_2_1*a_2)),h(sum(theta_2_2*a_2))) # ponemos un 1 al principio
a_3
gr <- graph(
c(c(1,4,1,5,2,4,2,5,3,4,3,5, 6, 4, 6, 5)))
plot(gr, layout = matrix(c(-4,1,-4,0,-4,-2,0,1,0,-1, -4, -1), byrow=T, ncol=2),
vertex.label=c('-2','5','1','a_1= 0.002','a_2=0.250','3'), vertex.label.cex=1.5,
vertex.size=50, vertex.color=c('salmon','salmon','gray','red','red'), vertex.label.cex=2,
vertex.label.color='white',vertex.frame.color=NA,
edge.label=c(1.5,2,-1,0.5,3,1,-0.5,-0.2))
gr <- graph(
c(1,2,1,3,1,4,2,5,3,5,4,5,1,6,1,7,1,8,1,9,6,5,7,5,8,5,9,5))
plot(gr, layout=matrix(c(-1,0,0,1,0,0,0,-1,1,0,0,0.6,0,0.3,0,-0.6,0,-0.3),
byrow=T,ncol=2),
vertex.size=c(rep(50,5), rep(1,4)), vertex.color=c(rep('salmon',5),rep('white',5)),
vertex.label=c(expression(a[j]^{(l)}),
expression(a[1]^{(l+1)}),expression(a[s]^{(l+1)}),
expression(a[n]^{(l+1)}),
expression(D), rep('',4)),
vertex.frame.color=NA, edge.curved=FALSE)
library(keras)
diabetes_ent <- MASS::Pima.tr
diabetes_pr <- MASS::Pima.te
x_ent <- diabetes_ent %>% select(-type) %>% as.matrix
x_ent_s <- scale(x_ent)
x_valid <- diabetes_pr %>% select(-type) %>% as.matrix
x_valid_s <- x_valid %>%
scale(center = attr(x_ent_s, 'scaled:center'),
scale = attr(x_ent_s,  'scaled:scale'))
y_ent <- as.numeric(diabetes_ent$type == 'Yes')
y_valid <- as.numeric(diabetes_pr$type == 'Yes')
set.seed(923)
modelo_tc <- keras_model_sequential()
#Decay - in dica regularizacion
#entropy = T - es para utilizar devianza
library(nnet)
set.seed(12)
nn <- nnet(g.2 ~ x.2, data = datos, size = 8, decay = 0.002, entropy = T)
nn$wts
nn$value
2*nn$value/30
dev(nn$wts)
qplot(x, predict(nn, newdata=data.frame(x_1 = x)), geom='line')
2*nn$value/30
dev(nn$wts)
qplot(x, predict(nn, newdata=data.frame(x.2 = x)), geom='line')
#Decay - in dica regularizacion
#entropy = T - es para utilizar devianza
library(nnet)
set.seed(12)
nn <- nnet(g.2 ~ x.2, data = datos, size = 8, decay = 0.005, entropy = T)
nn$wts
nn$value
2*nn$value/30
dev(nn$wts)
qplot(x, predict(nn, newdata=data.frame(x.2 = x)), geom='line')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
ggplot(dat_ingreso, aes(x = tamaño_localidad, y = INGTOT/1000)) +
geom_boxplot() +
scale_y_log10(breaks = c(2.5, 5, 10, 20, 40, 80, 160, 320, 640, 1280)) +
ylab("Ingreso trimestral (miles de pesos)")
knitr::include_graphics('/C/Users/sperez/Documents/GitHub/mineria-analisis-datosdata/hex-rmarkdown.jpg')
knitr::include_graphics('/Users/sperez/Documents/GitHub/mineria-analisis-datosdata/hex-rmarkdown.jpg')
knitr::include_graphics(patch = c("/Users/sperez/Documents/GitHub/mineria-analisis-datosdata/hex-rmarkdown.jpg")
knitr::include_graphics(patch = c("/Users/sperez/Documents/GitHub/mineria-analisis-datosdata/hex-rmarkdown.jpg"))
knitr::include_graphics(path = c("/Users/sperez/Documents/GitHub/mineria-analisis-datosdata/hex-rmarkdown.jpg"))
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
theme_set(theme_minimal(base_size = 13))
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
knitr::include_graphics(path = c("GitHub/mineria-analisis-datosdata/hex-rmarkdown.jpg"))
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
theme_set(theme_minimal(base_size = 13))
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
knitr::include_graphics(path = c("GitHub/mineria-analisis-datosdata/hex-rmarkdown.jpg"))
plot(pressure)
getwd()
#Binomial usando Inversión
rbinomialI <- function(n = 10, p = 0.3){
U <- runif(1)
i <- 0
p <- (1-p) ^ n
P <- p
while(U >= P){
p <- ((n-i) * p ) / (i+1)
P <- P + p
i <- i + 1
}
i
}
set.seed(221285)
sims_binom <- rbinomialI(10,0.3)
#Binomial usando Inversión
rbinomialI <- function(n = 10, p = 0.3){
U <- runif(1)
i <- 0
p <- (1-p) ^ n
P <- p
while(U >= P){
p <- ((n-i) * p * p) / ((i+1) * (1-p) )
P <- P + p
i <- i + 1
}
i
}
set.seed(221285)
sims_binom <- rbinomialI(10,0.3)
#Binomial usando Inversión
rbinomialI <- function(n = 10, p = 0.3){
U <- runif(1)
i <- 0
p <- (1-p) ^ n
P <- p
while(U >= P){
p <- ((n-i) * p * p) / ((i+1) * (1-p) )
P <- P + p
i <- i + 1
}
i
}
set.seed(221285)
sims_binom <- rbinomialI(10,0.3)
#Binomial usando Inversión
rbinomialI <- function(n = 10, p = 0.3){
U <- runif(1)
i <- 0
p <- (1-p) ^ n
P <- p
while(U >= P){
p <- ((n-i) * p * p) / ((i+1) * (1-p) )
P <- P + p
i <- i + 1
}
i
}
library(tidyverse)
library(ggplot2)
library(gtools)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
#Binomial usando Inversión
rbinomialI <- function(n = 10, p = 0.3){
U <- runif(1)
i <- 0
p <- (1-p) ^ n
P <- p
while(U >= P){
p <- ((n-i) * p * p) / ((i+1) * (1-p) )
P <- P + p
i <- i + 1
}
i
}
set.seed(221285)
sims_binom <- rbinomialI(10,0.3)
#Binomial usando Inversión
rbinomialI <- function(n = 10, p = 0.3){
U <- runif(1)
i <- 0
p <- (1-p) ^ n
P <- p
while(U >= P){
p <- (p * p) / (1-p)
p <- p * (n -1) / (i+1)
P <- P + p
i <- i + 1
}
i
}
set.seed(221285)
sims_binom <- rbinomialI(10,0.3)
library(tidyverse)
library(ggplot2)
library(gtools)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
#Binomial usando Inversión
rbinomialI <- function(n = 10, p = 0.3){
U <- runif(1)
i <- 0
p <- (1-p) ^ n
P <- p
while(U >= P){
p <- (p * p) / (1-p)
p <- p * (n -1) / (i+1)
P <- P + p
i <- i + 1
}
i
}
#set.seed(221285)
sims_binom <- rbinomialI(10,0.3)
#set.seed(221285)
sims_binom <- rbinomialI(10,0.3)
#set.seed(221285)
sims_binom <- rbinomialI(10,0.3)
#set.seed(221285)
sims_binom <- rbinomialI(10,0.3)
#set.seed(221285)
sims_binom <- rbinomialI(10,0.3)
